#include <fstream>
#include "GoTools/trivariate/SplineVolume.h"
#include "GoTools/geometry/ObjectHeader.h"
#include "GoTools/utils/errormacros.h"
#include "GoTools/trivariate/CoonsPatchVolumeGen.h"

using namespace Go;
using namespace std;

//===========================================================================
//                                                                           
// File: createCoonsVolume
//                                                                           
//                                                                           
// Description:
//
// This program demonstrates the use of the static function 'createCoonsPatch'
// in namespace 'CoonsPatchVolumeGen'.
// The function can create a new 'SplineVolume' representing the coons patch of
// six SplineSurfaces, the six faces of the volume.
//
// This program reads the 6 boundary surfaces needed to create the volume. 
// The surfaces must be non-rational, lie in the same space, and have
// conciding edge curves where needed. The input file must satisfy these
// conditions. This is not tested.
// The B-spline bases of the surfaces might be reversed, swapped, have order
// raised, knots inserted and parameter interval rescaled to [0,1].
// The input filename is data/volume_boundaries.g2. This file is created
// by the example program createVolumeBoundaries in compositemodel.
//
// The input surfaces are not all particularily "nice". Thus, a Coons 
// approach is not expected to give a very good parameterization. To 
// improve the representation, the volume is smoothed, i.e. the inner
// coefficients of the volume is modified to minimize a smoothing
// funcitonal. The volume is written to the file data/volume1.g2 prior to
// smoothing and data/volume1.g2 after smoothing
// 
//===========================================================================

int main(int argc, char* argv[] )
{
   // Open input volume file.
  ifstream is("data/volume_boundaries.g2");
  ALWAYS_ERROR_IF(is.bad(), "Bad or no volume input filename");

  // Read surfaces
  vector<shared_ptr<SplineSurface> > bdsf(6);
  for (int ki=0; ki<6; ++ki)
    {
        ObjectHeader head;
	head.read(is);
	bdsf[ki] = shared_ptr<SplineSurface>(new SplineSurface());
	bdsf[ki]->read(is);
    }

  // Create Coons volume
  shared_ptr<SplineVolume> vol(CoonsPatchVolumeGen::createCoonsPatch(bdsf[0],
								     bdsf[1],
								     bdsf[2],
								     bdsf[3],
								     bdsf[4],
								     bdsf[5]));

  // Write to file
  ofstream of1("data/volume1.g2");
  vol->writeStandardHeader(of1);  
  vol->write(of1);

  // Perform smoothing
  
