#!/bin/bash

MODULES="sisl gotools-core parametrization implicitization intersections igeslib trivariate topology compositemodel trivariatemodel viewlib ttl"
RESULT_CATALOG=GoTools-4.0.0

clear

# checking for existence
if [ -d $RESULT_CATALOG ] 
then
   echo Catalog \'$RESULT_CATALOG\' already exists. 
   echo Type \'yes\' to continue \(replace existing structure\), 
   echo or anything else to abort.
   read choice
   if [ $choice ] && [ $choice == "yes" ]
   then
      echo You chose to continue.  Removing old file structure...
      rm -rf $RESULT_CATALOG
   else
      echo Aborting script.  No changes carried out.
      exit 1
   fi
fi
if [ -d $RESULT_CATALOG ] 
then
   echo Unable to remove the already-existing catalog of name $RESULT_CATALOG.
   echo Aborting script.  No changes carried out.
   exit 1
fi
echo

# reporting activity to user 
echo GPL distribution of GoTools will be made in catalog
echo \'$RESULT_CATALOG\'.
echo

#making file structure
mkdir $RESULT_CATALOG


# copy files
cp ../CMakeLists.txt ../Doxyfile $RESULT_CATALOG
#cp -r ../include ../src ../doc ../examples $RESULT_CATALOG
for m in $MODULES
do
    echo Copying $m
    #cp -r ../$m $RESULT_CATALOG
    mkdir $RESULT_CATALOG/$m
    cp -r ../$m/CMakeLists.txt ../$m/include ../$m/src $RESULT_CATALOG/$m
    if [ -d ../$m/examples ]
    then
        cp -r ../$m/examples $RESULT_CATALOG/$m
    fi
    if [ -d ../$m/data ]
    then
        cp -r ../$m/data $RESULT_CATALOG/$m
    fi
done
echo Copying newmat
cp -r ../newmat $RESULT_CATALOG

for m in $MODULES
do
    if [ "$m" = "viewlib" ]
    then
        echo Copying goview in viewlib
        mkdir $RESULT_CATALOG/viewlib/app
        cp ../viewlib/app/goview.C $RESULT_CATALOG/viewlib/app
    fi
done

echo Generating GPL headers

# get all header and source files
header_files=`find $RESULT_CATALOG | grep -e '\.h' -e '\.hpp' | grep -v '.svn' | grep -v 'newmat'`
source_files=`find $RESULT_CATALOG | grep -e '\.C' -e '\.cpp' -e '\.c' | grep -v '.svn' | grep -v 'newmat'`

TMP_FILENAME=mnisojdnlsdbewusdfglkcxjvbncvxsdfg

# generating GPL header files
for f in $header_files
do
    ftmp=`echo $f | cut -b 4-`
    if [ `grep $ftmp excluded_files` ]
    then 
       echo excluded file $f.
    else
       filename=`basename $f`
       # first, write license header information
       cat license_header > $TMP_FILENAME
       
       # remove all information between include guards, and write result
       sed -n -e'/#ifndef/,$p' $f >> $TMP_FILENAME
    fi
    cp -f $TMP_FILENAME $f
done

# generating GPL source files
for f in $source_files
do
    ftmp=`echo $f | cut -b 4-`
    if [ `grep $ftmp excluded_files` ]
    then 
       echo excluded file $f.
    else
       filename=`basename $f`
       # first, write license header information
       cat license_header > $TMP_FILENAME
   
       # remove all preliminary header information and add result to file
       sed -n -e'/#include/,$p' $f >> $TMP_FILENAME
    fi
    cp -f $TMP_FILENAME $f
done

rm $TMP_FILENAME	  


echo Adding additional files

# adding additional files
cp ChangeLog $RESULT_CATALOG 2> /dev/null
cp COPYING $RESULT_CATALOG 2> /dev/null
cp INSTALL $RESULT_CATALOG 2> /dev/null
cp README $RESULT_CATALOG 2> /dev/null


echo DONE
